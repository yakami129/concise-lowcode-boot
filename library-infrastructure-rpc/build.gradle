plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.google.protobuf'
    id 'idea'
}

description = "rpc基础设施"
group = 'com.github.yakami.library.library.infrastructure.rpc'
version = '1.0.0'
sourceCompatibility = '11'

bootJar.enabled = false
jar.enabled = true

dependencies {

    compileOnly project(":library-infrastructure")
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "com.google.protobuf:protobuf-java:${protobufVersion}"
    compile("net.devh:grpc-spring-boot-starter:${grpcStarterVersion}") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter'
    }

    // nacos starter
    compile "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config:${nacosVerison}"
    compile "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery:${nacosVerison}"
    compile "org.springframework.cloud:spring-cloud-starter-bootstrap"

    testImplementation project(":library-testing")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

protobuf {
    protoc {
        // for apple m1, please add protoc_platform=osx-x86_64 in $HOME/.gradle/gradle.properties
        // see https://blog.csdn.net/u013903024/article/details/121263515
        if (project.hasProperty('protoc_platform')) {
            artifact = "com.google.protobuf:protoc:${protobufVersion}:${protoc_platform}"
        } else {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            if (project.hasProperty('protoc_platform')) {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}:${protoc_platform}"
            } else {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }

        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

idea {
    module {
        sourceDirs += file("src/generated/main/java")
        sourceDirs += file("src/generated/main/grpc")
        generatedSourceDirs += file("src/generated/main/java")
        generatedSourceDirs += file("src/generated/main/grpc")
    }
}

test {
    useJUnitPlatform()
}